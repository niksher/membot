package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"strconv"
	"strings"
	"tg-video-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// HandleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
func (b *Bot) HandleUpdate(update tgbotapi.Update) {
	switch {
	case update.CallbackQuery != nil:
		b.HandleCallbackQuery(update.CallbackQuery)

	case update.Message != nil:
		if update.Message.IsCommand() {
			b.HandleCommand(update.Message)
		} else if update.Message.Video != nil {
			b.HandleVideoMessage(update.Message)
		} else {
			b.HandleTextMessage(update.Message)
		}
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) HandleCommand(msg *tgbotapi.Message) {
	s, _ := json.Marshal(msg)
	fmt.Println(string(s))
	switch msg.Command() {
	case "start":
		b.ShowMainMenu(msg.Chat.ID)
		if b.IsAdmin(int64(msg.From.ID)) && msg.Text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" {
			b.ShowAdminMenu(msg.Chat.ID)
		}
	case "help":
		b.SendHelpMessage(msg.Chat.ID)
	case "add_tags":
		b.HandleAddTagsCommand(msg)
	case "get_by_tag":
		b.HandleGetByTagCommand(msg)
	case "get_video":
		b.HandleGetVideoCommand(msg)
	case "add_video":
		b.HandleAddVideoCommand(msg)
	case "list_videos":
		b.HandleListVideosCommand(msg)
	case "delete_video":
		b.HandleDeleteVideoCommand(msg)
	default:
		b.SendUnknownCommand(msg.Chat.ID)
	}
}

// HandleVideoMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
func (b *Bot) HandleVideoMessage(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !b.IsAdmin(int64(msg.From.ID)) {
		//b.SendMessage(msg.Chat.ID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ")
		return
	}
	if !b.IsAdminGroup(msg.Chat.ID) {
		//b.SendMessage(msg.Chat.ID, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–∏–¥–µ–æ")
		return
	}

	video := models.Video{
		FileID:  msg.Video.FileID,
		Caption: msg.Caption,
	}

	videoID, err := b.VideoRepository.SaveVideo(video)
	if err != nil {
		if strings.Contains(err.Error(), "Duplicate entry") {
			b.SendMessage(msg.Chat.ID, "‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
			return
		}
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: %v", err)
		b.SendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ")
		return
	}

	response := fmt.Sprintf("‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (ID: %d)\n–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ –∫–æ–º–∞–Ω–¥–æ–π:\n/add_tags %d —Ç–µ–≥1 —Ç–µ–≥2", videoID, videoID)
	b.SendMessage(msg.Chat.ID, response)
}

// HandleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) HandleTextMessage(msg *tgbotapi.Message) {
	switch msg.Text {
	case "üì• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
		b.SendMessage(msg.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
	case "üè∑ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏":
		b.SendMessage(msg.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ ID –≤–∏–¥–µ–æ –∏ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–ü—Ä–∏–º–µ—Ä: 5 –∫–æ—Ç–∏–∫–∏ —Å–º–µ—à–Ω—ã–µ")
		/*case "üîç –ù–∞–π—Ç–∏ –ø–æ —Ç–µ–≥—É":
			b.ShowPopularTags(msg.Chat.ID)
		default:
			b.TryParseAsTagCommand(msg)*/
	}
}

// HandleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
func (b *Bot) HandleCallbackQuery(query *tgbotapi.CallbackQuery) {
	chatID := query.Message.Chat.ID
	data := query.Data

	switch {
	case strings.HasPrefix(data, "tag_"):
		tag := strings.TrimPrefix(data, "tag_")
		b.SendVideosByTag(chatID, tag)

	/*case data == "more_tags":
	b.ShowMoreTags(chatID)*/

	case strings.HasPrefix(data, "video_"):
		videoID, _ := strconv.Atoi(strings.TrimPrefix(data, "video_"))
		b.SendVideoByID(chatID, int64(videoID))
	}

	b.API.AnswerCallbackQuery(tgbotapi.NewCallback(query.ID, ""))
}

// HandleAddTagsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤
func (b *Bot) HandleAddTagsCommand(msg *tgbotapi.Message) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) < 2 {
		b.SendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_tags [ID –≤–∏–¥–µ–æ] [—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª]")
		return
	}

	videoID, err := strconv.Atoi(args[0])
	if err != nil {
		b.SendMessage(msg.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–∏–¥–µ–æ")
		return
	}

	tags := args[1:]
	err = b.VideoRepository.AddTagsToVideo(int64(videoID), tags)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤: %v", err)
		b.SendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤")
		return
	}

	b.SendMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: %s", strings.Join(tags, ", ")))
}

// HandleGetByTagCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É
func (b *Bot) HandleGetByTagCommand(msg *tgbotapi.Message) {
	tag := msg.CommandArguments()
	/*if tag == "" {
		b.ShowPopularTags(msg.Chat.ID)
		return
	}*/

	b.SendVideosByTag(msg.Chat.ID, tag)
}

// HandleGetVideoCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /get_video
func (b *Bot) HandleGetVideoCommand(msg *tgbotapi.Message) {
	chatID := msg.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
	video, err := b.VideoRepository.GetRandomUnsentVideo(chatID)
	if err != nil {
		if err.Error() == "no unsent videos available" {
			b.SendMessage(chatID, "üéâ –í—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ!")
			return
		}
		log.Printf("Failed to get random video: %v", err)
		b.SendMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
	videoMsg := tgbotapi.NewVideoShare(chatID, video.FileID)
	if video.Caption != "" {
		videoMsg.Caption = video.Caption
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–≥–∞–º–∏
	if len(video.Tags) > 0 {
		videoMsg.ReplyMarkup = createVideoTagsKeyboard(video.Tags)
	}

	if _, err := b.API.Send(videoMsg); err != nil {
		log.Printf("Failed to send video: %v", err)
		b.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
		return
	}

	// –ü–æ–º–µ—á–∞–µ–º –≤–∏–¥–µ–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
	if err := b.VideoRepository.MarkVideoSent(chatID, video.ID); err != nil {
		log.Printf("Failed to mark video as sent: %v", err)
	}
}

func (b *Bot) HandleAddVideoCommand(msg *tgbotapi.Message) {
	if !b.IsAdmin(int64(msg.From.ID)) {
		//b.SendMessage(msg.Chat.ID, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
		return
	}
	b.SendMessage(msg.Chat.ID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
}

func (b *Bot) HandleListVideosCommand(msg *tgbotapi.Message) {
	if !b.IsAdmin(int64(msg.From.ID)) {
		b.SendMessage(msg.Chat.ID, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
		return
	}

	videos, err := b.VideoRepository.GetAllVideos()
	if err != nil {
		b.SendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ")
		return
	}

	var response strings.Builder
	response.WriteString("üìã –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ:\n\n")
	for _, v := range videos {
		response.WriteString(fmt.Sprintf("ID: %d\n", v.ID))
		if v.Caption != "" {
			response.WriteString(fmt.Sprintf("–û–ø–∏—Å–∞–Ω–∏–µ: %s\n", v.Caption))
		}
		response.WriteString("\n")
	}

	b.SendMessage(msg.Chat.ID, response.String())
}

func (b *Bot) HandleDeleteVideoCommand(msg *tgbotapi.Message) {
	if !b.IsAdmin(int64(msg.From.ID)) {
		b.SendMessage(msg.Chat.ID, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
		return
	}

	videoID, err := strconv.Atoi(msg.CommandArguments())
	if err != nil {
		b.SendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_video [ID –≤–∏–¥–µ–æ]")
		return
	}

	if err := b.VideoRepository.DeleteVideo(int64(videoID)); err != nil {
		b.SendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ")
		return
	}

	b.SendMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –í–∏–¥–µ–æ ID %d —É–¥–∞–ª–µ–Ω–æ", videoID))
}

// SendVideosByTag –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É
func (b *Bot) SendVideosByTag(chatID int64, tag string) {
	videos, err := b.VideoRepository.GetVideosByTag(tag)
	if err != nil || len(videos) == 0 {
		b.SendMessage(chatID, "‚ùå –í–∏–¥–µ–æ —Å —Ç–µ–≥–æ–º '"+tag+"' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
	video := videos[0]
	msg := tgbotapi.NewVideoShare(chatID, video.FileID)
	if video.Caption != "" {
		msg.Caption = video.Caption
	}
	b.API.Send(msg)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–∏–¥–µ–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
	/*if len(videos) > 1 {
		b.ShowMoreVideosButton(chatID, tag, 1)
	}*/
}

// SendVideoByID –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ ID
func (b *Bot) SendVideoByID(chatID, videoID int64) {
	video, err := b.VideoRepository.GetVideoByID(videoID)
	if err != nil {
		b.SendMessage(chatID, "‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"+err.Error())
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —ç—Ç–æ –≤–∏–¥–µ–æ
	if b.VideoRepository.IsVideoSent(chatID, videoID) {
		b.SendMessage(chatID, "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ —Ä–∞–Ω–µ–µ")
		return
	}

	msg := tgbotapi.NewVideoShare(chatID, video.FileID)
	if video.Caption != "" {
		msg.Caption = video.Caption
	}
	b.API.Send(msg)

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
	b.VideoRepository.MarkVideoSent(chatID, videoID)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) SendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	b.API.Send(msg)
}

func (b *Bot) SendHelpMessage(chatID int64) {
	helpText := `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/add_tags [ID] [—Ç–µ–≥–∏] - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ –∫ –≤–∏–¥–µ–æ
/get_by_tag [—Ç–µ–≥] - –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–≥—É
/get_video [ID] - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID`
	b.SendMessage(chatID, helpText)
}

func (b *Bot) SendUnknownCommand(chatID int64) {
	b.SendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
}

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏ –≤–∏–¥–µ–æ
func createVideoTagsKeyboard(tags []string) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, tag := range tags {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				"#"+tag,
				"tag_"+tag,
			),
		))
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}
